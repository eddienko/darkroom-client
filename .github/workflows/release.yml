name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare Release Notes
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        id: set_version
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare release notes
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          awk -v ver="v$VERSION" '
            $0 ~ "^## " ver {flag=1; next}
            /^## / {flag=0}
            flag
          ' CHANGELOG.md > RELEASE_NOTES.md

          if [ ! -s RELEASE_NOTES.md ]; then
            echo "- No release notes provided for $VERSION" > RELEASE_NOTES.md
          fi

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md

  build:
    name: Build Binaries
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Prepare build info
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          GIT_COMMIT=$(git rev-parse HEAD)
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          DARKROOM_SECRET: ${{ secrets.DARKROOM_SECRET }}
        run: |
          mkdir -p ./binaries
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          OUT="binaries/darkroom-${GOOS}-${GOARCH}${EXT}"
          echo "ðŸ”¨ Building $OUT"
          go build -ldflags "\
            -X 'darkroom/cmd.Version=$VERSION' \
            -X 'darkroom/cmd.GitCommit=$GIT_COMMIT' \
            -X 'darkroom/cmd.BuildDate=$BUILD_DATE'" \
            -X 'darkroom/pkg/config.DarkroomSecret=$DARKROOM_SECRET' -o "$OUT"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: binaries/*

  release:
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries-linux-amd64
          path: ./binaries
      - uses: actions/download-artifact@v4
        with:
          name: binaries-windows-amd64
          path: ./binaries
      - uses: actions/download-artifact@v4
        with:
          name: binaries-darwin-amd64
          path: ./binaries
      - uses: actions/download-artifact@v4
        with:
          name: binaries-darwin-arm64
          path: ./binaries

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Generate combined checksums
        run: |
          cd ./binaries
          sha256sum * > ../checksums.txt
          cd ..
          cat checksums.txt

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            binaries/*
            checksums.txt
            RELEASE_NOTES.md
          body_path: RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

